package DAO;

import Model.Message;
import Util.ConnectionUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;


public class MessageDAO {

    /**
     * TODO: retrieve all Messages from the Message table.
     * You only need to change the sql String.
     * @return all Messages.
     */
    public List<Message> getMessages(){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> Messages = new ArrayList<>();
        try {
            //Write SQL logic here
            String sql = "select * from message";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Message Message = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                 rs.getString("message_text"), rs.getLong("time_posted_epoch"));
                Messages.add(Message);
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return Messages;
    }

    public Message getMessageFromId(int id){
        Connection connection = ConnectionUtil.getConnection();
        
        try {
            //Write SQL logic here
            String sql = "select * from message where message.message_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            
            preparedStatement.setInt(1, id);
            
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                        rs.getString("message_text"), rs.getLong("time_posted_epoch"));
                return message;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * TODO: insert an Message into the Message table.
     * The Message_id should be automatically generated by the sql database if it is not provided because it was
     * set to auto_increment. Therefore, you only need to insert a record with a single column (name).
     * You only need to change the sql String and leverage PreparedStatements' setString methods.
     */
    public Message insertMessage(Message Message){
        Connection connection = ConnectionUtil.getConnection();
        try {
//          Write SQL logic here. You should only be inserting with the name column, so that the database may
//          automatically generate a primary key.
            String sql = "insert into message (posted_by, message_text, time_posted_epoch) values (?.?,?)" ;
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            //write preparedStatement's setString method here.
            preparedStatement.setInt(1, Message.getPosted_by());
            preparedStatement.setString(2, Message.getMessage_text());
            preparedStatement.setLong(3, Message.getTime_posted_epoch());
            
            preparedStatement.executeUpdate();
            ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
            if(pkeyResultSet.next()){
                int generated_Message_id = (int) pkeyResultSet.getLong(1);
                return new Message(generated_Message_id, pkeyResultSet.getInt(2), pkeyResultSet.getString(3), pkeyResultSet.getLong(4));
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    public Message deleteMessageFromId(int id){
        Connection connection = ConnectionUtil.getConnection();
        
        try {
            Message target = getMessageFromId(id);
            if(target == null){
                return null;
            }

            //Write SQL logic here
            String sql = "delete * from message where message.message_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            
            preparedStatement.setInt(1, id);
            
            preparedStatement.execute();
            return target;
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }
    public Message editMessageFromId(int id, String newText){
        Connection connection = ConnectionUtil.getConnection();
        
        try {
            Message target = getMessageFromId(id);
            if(target == null || newText == null || newText.length() > 255){
                return null;
            }

            //Write SQL logic here
            String sql = "update message set message_text = ? where message_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            
            preparedStatement.setString(1, newText);
            preparedStatement.setInt(2, id);
            
            preparedStatement.executeUpdate();
            return getMessageFromId(id);
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }
}

